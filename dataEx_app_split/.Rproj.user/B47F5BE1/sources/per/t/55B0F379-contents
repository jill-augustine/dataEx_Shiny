################################################
#
# App Modified to run on local machine
#
################################################
library(conflicted)
library(SparkR)
library(shiny)
conflict_prefer("column","shiny")
#library(sparklyr)
#library(readr)
library(dplyr)
library(ggplot2)
library(shinythemes)
library(DT)
library(lubridate)
library(shinyTime)
library(hms)
library(stringr)
library(shinycssloaders)

######### Datalake Settings ########
#config <- spark_config()
#config$spark.sql.hive.convertMetastoreParquet <- 'false' # When reading from and writing to Hive metastore Parquet tables, Spark SQL will try to use its own Parquet support instead of Hive SerDe for better performance. This behavior is controlled by the spark.sql.hive.convertMetastoreParquet configuration, and is turned on by default.
#config$spark.driver.memory <- '20g'
#sc <- spark_connect(master = "yarn-client", spark_home = "/usr/hdp/current/spark2-client", version = "2.2", config = config)

######### Local Settings ###########

#sc <- spark_connect(master = "local")

####################################



# Define UI for application that draws a histogram
ui <- fluidPage(theme = shinytheme("simplex"),
                
                ### Application title
                #fluidRow(column(4,h2("Billing Report for IMSI: ")), column(8, h2(textOutput(outputId = "imsi")))),
                #titlePanel("Change this title"),
                
                navbarPage(title = "Customer Based Billing Report", id = "tabs", selected = strong("Load Dataset"),
                           tabPanel(title = strong("Request Dataset"),
                                    wellPanel(
                                      fluidRow(column(3, textInput(inputId = "email",
                                                                   label = "Enter E-Mail Address")),
                                               column(3,textInput(inputId = "imsi",
                                                                  label = "Enter IMSI Number")),
                                               column(3, dateRangeInput(inputId = "requestdates",
                                                                        label = "Enter start and end dates",
                                                                        weekstart = 1,
                                                                        language = "de",
                                                                        format = "dd/mm/yyyy")),
                                               column(3,br(),
                                                      actionButton(inputId = "requestdata",
                                                                     label = "Request Dataset",
                                                                     class = "btn-primary"))),
                                      fluidRow(column(12,textOutput(outputId = "datarequested") %>% 
                                                 withSpinner(type = 1, color = "#DA291C")))
                                    )
                           ),
                           tabPanel(title = strong("Load Dataset"),
                                    fluidRow(column(12, h4(strong("Select data to import")))),
                                    wellPanel(
                                      #fluidRow(column(4, h5("Enter Dataset ID")), column(4, h5("Select Dates")), column(4))
                                      #,
                                      fluidRow(column(4, textInput(inputId = "datasetID", 
                                                                   label = "Enter Dataset ID", 
                                                                   placeholder = "20190101123456")), 
                                               column(3, dateRangeInput(inputId = "importdates",
                                                                        label = "Enter start and end dates (dd/mm/yyyy)",
                                                                        weekstart = 1,
                                                                        language = "de",
                                                                        format = "dd/mm/yyyy",
                                                                        start = "12/13/2018", #written in mm/dd/yyyy format and one day ahead
                                                                        end = "12/13/2018")), #this sets date to 12/12/2018 in dd/mm/yyyy
                                               column(2,br(),
                                                      actionButton(inputId = "loaddataset",
                                                                   label = "Load Dataset",
                                                                   class = "btn-primary"))),
                                      uiOutput(outputId = "message1"),
                                      #DT::dataTableOutput(outputId = "testDF"),
                                      textOutput(outputId = "dataloaded") %>% withSpinner(type = 1, color = "#DA291C")
                                    )),
                           
                           
                           tabPanel(title = strong("Visualise Data"),
                                    fluidRow(column(12, h4(strong("Select a date range to visualise")))),
                                    wellPanel(
                                      fluidRow(column(3,dateRangeInput(inputId = "visdates",
                                                                       label = "Enter start and end dates",
                                                                       weekstart = 1,
                                                                       language = "de",
                                                                       format = "dd/mm/yyyy",
                                                                       start = "12/11/2018",
                                                                       end = "12/11/2018")),
                                               column(2,br(), actionButton(inputId = "applyselection",
                                                                           label = "Apply Selection",
                                                                           class = "btn-primary"))),
                                      uiOutput(outputId = "message2"),
                                      fluidRow(column(12, p("Select ", strong("1 day"), " to view traffic ", strong("per hour")), 
                                                      p("Select ",strong("2-31 days"), " to view traffic ", strong("per day")),
                                                      p("Select ", strong("32+ days"), " to view traffic ", strong("per month "))))
                                      
                                    ),
                                    fluidRow(column(6,
                                                    fluidRow(column(12,plotOutput(outputId = "plotovertime") %>%
                                                                      withSpinner(type = 1, color = "#DA291C"))),
                                                    fluidRow(column(12, uiOutput(outputId = "downloadvis1")))
                                    ),
                                    column(6, fluidRow(column(12, h5("Made using the data below:"),
                                                              DT::dataTableOutput(outputId = "trafficdatatable") %>%
                                                                withSpinner(type = 1, color = "#DA291C"))),
                                           fluidRow(column(12, uiOutput(outputId = "downloadagg1")))) # agg = aggregated data
                                    )
                                    ,
                                    
                                    br(),hr(), br(),
                                    fluidRow(column(6,
                                                    fluidRow(column(12, plotOutput(outputId = "plotperpc") %>% 
                                                                      withSpinner(type = 1, color = "#DA291C"))),
                                                    fluidRow(column(12, uiOutput(outputId = "downloadvis2")))
                                    ),
                                    column(6, fluidRow(column(12, h5("Made using the data below:"), 
                                                              DT::dataTableOutput(outputId = "perPCdatatable") %>%
                                                                withSpinner(type = 1, color = "#DA291C"))),
                                           fluidRow(column(12, uiOutput(outputId = "downloadagg2"))) # agg = aggregated data
                                    )
                                    ))
                           
                           ,
                           tabPanel(title = strong("Raw Data/Export"),
                                    #### selecting data
                                    fluidRow(column(12, h4(strong("Select the data you want to export"),
                                                           p("(Max 6 hours)")))),
                                    splitLayout(cellWidths = c("25%","75%"),
                                                
                                    # wellPanel(                     
                                    #   fluidRow(fluidRow(column(4,dateRangeInput(inputId = "colldates",
                                    #                                             label = "Enter start and end dates",
                                    #                                             weekstart = 1,
                                    #                                             language = "de",
                                    #                                             format = "dd/mm/yyyy")),
                                    #                     column(4,checkboxGroupInput(inputId = 'selectedvars',
                                    #                                                 label = strong('Select columns to load'),
                                    #                                                 choices = c('starttimesecond', 'starttimemilsec', 'endtimesecond', 'endtimemilsec', 'associationflag', 'imsi', 'msisdn', 'imeisv', 'ms_ip', 'server_ip', 'ms_port', 'server_port', 'ip_protocol', 'apn', 'charging_characteristics', 'rat_type', 'serving_node_ip', 'gateway_node_ip', 'cgi', 'sai', 'rai', 'tai', 'ecgi', 'lai', 'uplink_traffic', 'downlink_traffic', 'uplink_packets', 'downlink_packets', 'protocol_category', 'application', 'sub_application', 'egn_sub_protocol', 'url', 'user_agent', 'status_code', 'response_content_length', 'response_content_type', 'request_content_length', 'request_content_type', 'messageformatversion', 'starttime', 'endtime', 'mcc_location', 'mnc_location', 'year', 'month', 'day', 'hour'),
                                    #                                                 selected = c('year', 'month', 'day', 'hour'))),
                                    #                     column(2,br(),actionButton(inputId = "collectdata",
                                    #                                                label = "Collect Data",
                                    #                                                class = "btn-primary"))),
                                    #            fluidRow(column(2, textInput(inputId = "collstarttime",
                                    #                                         label = "Enter start time (hh:mm)",
                                    #                                         placeholder = "hh:mm")),
                                    #                     column(2, textInput(inputId = "collendtime",
                                    #                                         label = "Enter end time (hh:mm)",
                                    #                                         placeholder = "hh:mm"))),
                                    #            fluidRow(uiOutput(outputId = "message3"))
                                    #   )),
                                    
                                    wellPanel(                     
                                      fluidRow(
                                        fluidRow(column(12,
                                                        fluidRow(column(12,
                                                          dateRangeInput(inputId = "colldates",
                                                                                label = "Enter start and end dates",
                                                                                weekstart = 1,
                                                                                language = "de",
                                                                                format = "dd/mm/yyyy"))),
                                                        fluidRow(column(6, textInput(inputId = "collstarttime",
                                                                                     label = "Enter start time (hh:mm)",
                                                                                     placeholder = "hh:mm",
                                                                                     value = '23:00')),
                                                                 column(6, textInput(inputId = "collendtime",
                                                                                     label = "Enter end time (hh:mm)",
                                                                                     placeholder = "hh:mm",
                                                                                     value = '23:59'))),
                                                        fluidRow(column(12,uiOutput(outputId = "message3"))),
                                                        fluidRow(column(6,checkboxGroupInput(inputId = 'selectedvars',
                                                                                             label = strong('Select columns to load'),
                                                                                             # added start_time, end_time because this will show the local time not the UTC time e.g. 2018-12-12T12:12:25Z
                                                                                             choices = c('start_time','end_time', 'ym','ymd','ymdh','ymdhm', 'starttimesecond', 'starttimemilsec', 'endtimesecond', 'endtimemilsec', 'associationflag', 'imsi', 'msisdn', 'imeisv', 'ms_ip', 'server_ip', 'ms_port', 'server_port', 'ip_protocol', 'apn', 'charging_characteristics', 'rat_type', 'serving_node_ip', 'gateway_node_ip', 'cgi', 'sai', 'rai', 'tai', 'ecgi', 'lai', 'uplink_traffic', 'downlink_traffic', 'uplink_packets', 'downlink_packets', 'protocol_category', 'application', 'sub_application', 'egn_sub_protocol', 'url', 'user_agent', 'status_code', 'response_content_length', 'response_content_type', 'request_content_length', 'request_content_type', 'messageformatversion', 'mcc_location', 'mnc_location', 'year', 'month', 'day', 'hour'),
                                                                                             selected = c('year', 'month', 'day', 'hour'))),
                                                                 column(6, br(),actionButton(inputId = "collectdata",
                                                                                             label = "Collect Data",
                                                                                             class = "btn-primary")))
                                                        )
                                                        )#,
                                                 # column(4,checkboxGroupInput(inputId = 'selectedvars',
                                                 #                             label = strong('Select columns to load'),
                                                 #                             choices = c('starttimesecond', 'starttimemilsec', 'endtimesecond', 'endtimemilsec', 'associationflag', 'imsi', 'msisdn', 'imeisv', 'ms_ip', 'server_ip', 'ms_port', 'server_port', 'ip_protocol', 'apn', 'charging_characteristics', 'rat_type', 'serving_node_ip', 'gateway_node_ip', 'cgi', 'sai', 'rai', 'tai', 'ecgi', 'lai', 'uplink_traffic', 'downlink_traffic', 'uplink_packets', 'downlink_packets', 'protocol_category', 'application', 'sub_application', 'egn_sub_protocol', 'url', 'user_agent', 'status_code', 'response_content_length', 'response_content_type', 'request_content_length', 'request_content_type', 'messageformatversion', 'starttime', 'endtime', 'mcc_location', 'mnc_location', 'year', 'month', 'day', 'hour'),
                                                 #                             selected = c('year', 'month', 'day', 'hour'))),
                                                 # column(3,br(),actionButton(inputId = "collectdata",
                                                 #                            label = "Collect Data",
                                                 #                            class = "btn-primary")))
                                                 # 
                                               
                                      
                                        )),
                                    
                                    fluidRow(column(10,offset = 1, uiOutput(outputId = "dataAndButton") %>%
                                                      withSpinner(type = 1, color = "#DA291C")))
                                    )
                           )))

